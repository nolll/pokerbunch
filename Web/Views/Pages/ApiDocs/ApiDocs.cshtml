@using Web.Models.PageBaseModels
@model Web.Models.AppModels.Details.ApiDocsPageModel

@{
    Layout = PageLayout.OneColumn;
}

<div class="block gutter">
    <h1 class="page-heading">Api Documentation</h1>
</div>
<div class="block gutter">
    <p>
        You can build your own applications that interact with Poker Bunch, by using the Poker Bunch API. You'll find everything you need to know right here.
    </p>
</div>

<div class="block gutter">
    <h1 class="module-heading">API Key</h1>
</div>
<div class="block gutter">
    <p>
        The first thing you need to know is that you will need an <a href="@Model.AppListUrl">API Key</a> to access the API.
    </p>
</div>

<div class="block gutter">
    <h1 class="module-heading">Posting Data</h1>
</div>
<div class="block gutter">
    <p>
        The content type of all POST request has to be application/x-www-form-urlencoded.
    </p>
</div>

<div class="block gutter">
    <h1 class="module-heading">Authentication</h1>
</div>
<div class="block gutter">
    <p>To authenticate, your application needs to post a request to <a href="@Model.TokenUrl">@Model.TokenUrl</a>.</p>
    <p>
        <pre><code>POST @Model.TokenUrl</code></pre>
    </p>
    <p>
        Send the following parameters in the body:
    </p>
    <p>
        <pre><code>grant_type = password
client_id = {your API key}
username = {your user's username}
password = {your user's password}</code></pre>
    </p>
    <p>
        If your credentials are valid, the response will include a token, for example
    </p>
    <p>
        <pre><code>ABCDE</code></pre>
    </p>
    <p>
        For subsequent requests, include an Authentication header with the content
    </p>
    <p>
        <pre><code>bearer ABCDE</code></pre>
    </p>
</div>

<div class="block gutter">
    <h1 class="module-heading">Bunches</h1>
</div>
<div class="block gutter">
    <p>To see the bunches you can access, call <a href="@Model.BunchListUrl">@Model.BunchListUrl</a>.</p>
</div>

<div class="block gutter">
    <h1 class="module-heading">Game Status</h1>
</div>
<div class="block gutter">
    <p>To get information about a running game, your application needs to call <a href="@Model.RunningGameUrl">@Model.RunningGameUrl</a>. The slug is the short name for your user's bunch. It's the same that appears in urls on the pokerbunch web site.</p>
    <p>If there is a game running, you will get the current results for it.</p>
    <p>It there is no game running, you will get a 204 NO CONTENT response.</p>
</div>

<div class="block gutter">
    <h1 class="module-heading">Buying in</h1>
</div>
<div class="block gutter">
    <p>To enter a player into a game, or to add money for a player, you post to <a href="@Model.BuyinUrl">@Model.BuyinUrl</a>.</p>
    <p>
        Send the following POST parameters:<br />
        playerid = {the player id}<br />
        amount = {the amount to add}<br />
        stack = {optional remaining money in stack before buyin}<br />
    </p>
</div>

<div class="block gutter">
    <h1 class="module-heading">Reporting</h1>
</div>
<div class="block gutter">
    <p>To report a players stack size, you post to <a href="@Model.ReportUrl">@Model.ReportUrl</a>.</p>
    <p>
        Send the following POST parameters:<br />
        playerid = {the player id}<br />
        stack = {the players stack}<br />
    </p>
</div>

<div class="block gutter">
    <h1 class="module-heading">Cashing out</h1>
</div>
<div class="block gutter">
    <p>To report a players stack and leave the game size, you post to <a href="@Model.CashoutUrl">@Model.CashoutUrl</a>.</p>
    <p>Cashing out is the same thing as reporting, except that you also leave the game. If you need to correct the cashout stack, just post again and the previous cashout will be overwritten.</p>
    <p>
        Send the following POST parameters:<br />
        playerid = {the player id}<br />
        stack = {the players stack}<br />
    </p>
</div>